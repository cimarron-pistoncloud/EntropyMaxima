#!/usr/bin/python

"""
Created on Tue Oct 25 09:18:09 2016
@author: noel
"""
import os
import sys
import em.tools.CHARMM_Parser as CP
import em.tools.Super_Structures as SS
import em.tools.input_output as IO
import optparse

def main():
    usage = "usage: %prog [options] arg"
    d = "This program reads a CSV file that has been generated by Super_Structure.\
         One residue or terminal will be deleted at the time.\n \
         WARNING: Deleting residues will leave a 'hole' in the structure. Amino Acids will not be renumbered.\n \
         This program can only delete residues or terminals that are in the parameter file.\
         The program will create a new and modified CSV file with the name of the input file plus the entity number."
    opt_parser = optparse.OptionParser(usage,description=d)
    opt_parser.add_option("-r","--rem", type="str",help="Enter Instruction for removing amino acid or terminal in hard \n \
                                                         quotes '\"'. Place: Amino Acid Number, Entity ID, Chain ID, \
                                                         Residue or Terminal to be deleted separated by comas.\n \
                                                         Example \"1,1,A,ACE\", \"1,1,A,CTER\" or \"20,2,A,LYS\". \n \
                                                         Chain ID or terminal name are case sensitive and \
                                                         do not need to go in quotes.\n\
                                                         For residues all atoms will be deleted. For terminals, only the \
                                                         atoms that correspond to the terminal will be deleted.")
    opt_parser.add_option("-i","--inp", type="str",help="Path to CSV file for removing residue.")
    opt_parser.add_option("-o","--out", type="str",help="Name of output CSV file after removal of amino acid or terminal.")
    
    options, args = opt_parser.parse_args()
    if not os.path.exists(options.inp):
        print "Error: File path for Super Structure CSV file does not exist."
        print("Type -h or --help for description and options.")
        sys.exit(1)
    params = CP.read_charmm_FF(param_path)
    insulin = SS.Super_Structure(params, options.inp,'add_linker')
    parse_list = options.rem.split(',') 
    #insulin = SS.Super_Structure(params, '/home/noel/Projects/Protein_design/EntropyMaxima/examples/Linker_minimization/2zta.csv','add_linker')
    #parse_list = "1,1,A,CTER".split(',')
    message = ''
    if len(parse_list) == 4:
        amino_acid_number = int(parse_list[0])
        entity_number = int(parse_list[1])
        chain = str(parse_list[2]).upper()
        term_res = str(parse_list[3]).upper()
        # So far this only works with natural aminoacids and ACE and CTER
        if term_res in ['ILE','GLN','GLY','GLU','CYS','ASP','SER','HSD','HSE','PRO','HSP','ASN','VAL','THR','TRP','CTER',\
                        'LYS','PHE','ALA','MET','ACE','LEU','ARG','TYR']:            
            message += 'Deleting a '+term_res+' from '
            message += 'amino acid number '+str(amino_acid_number)+' in entity id '+str(entity_number)+' and chain '+chain+'.\n'
            insulin.delete_aa(amino_acid_number,entity_number,chain,term_res)
            # If amino acid that is at the protein terminal is deleted, the terminal must be deleted too.
            min_aa = min(insulin.Full_Structure.aaid[(insulin.Full_Structure.ent_id == entity_number) & (insulin.Full_Structure.chain == chain)])
            max_aa = max(insulin.Full_Structure.aaid[(insulin.Full_Structure.ent_id == entity_number) & (insulin.Full_Structure.chain == chain)])
            if amino_acid_number == min_aa:
                del_terminal = False
                # This checks that there is no ACETYL atoms and removes them it does.
                for ii in insulin.Full_Structure.index[(insulin.Full_Structure.aaid == amino_acid_number) &\
                                                       (insulin.Full_Structure.ent_id == entity_number) &\
                                                       (insulin.Full_Structure.chain == chain)]:
                    if insulin.Full_Structure.loc[ii,'component'] == 'ACETY':
                        del_terminal = True
                        term_res = 'ACE'
                        break
                if del_terminal:
                    insulin.delete_aa(amino_acid_number,entity_number,chain,term_res)
            if amino_acid_number == max_aa:
                if term_res != 'CTER':
                    del_terminal = False
                    for ii in insulin.Full_Structure.index[(insulin.Full_Structure.aaid == amino_acid_number) &\
                                                           (insulin.Full_Structure.ent_id == entity_number) &\
                                                           (insulin.Full_Structure.chain == chain)]:
                        if insulin.Full_Structure.loc[ii,'component'] == 'CTERM':
                            del_terminal = True
                            term_res = 'CTER'
                            break
                    if del_terminal:
                        insulin.delete_aa(amino_acid_number,entity_number,chain,term_res)
                else:
                    pass
            file_name = os.path.basename(options.out).split('.')[0]
            dir_path = os.path.dirname(options.out)
            # Super Structure needs to know about models. 
            num_models = len(range(((insulin.Full_Structure.shape[1]-20)/5)))+1
            insulin.models = [str(i) for i in range(1,num_models+1)]
            
            insulin.write_csv(dir_path,file_name)
            outPDB = IO.pdb()
            outPDB.write_pdb(insulin,dir_path,file_name,'all')
        else:
            print('ERROR: del_residue.py only works with natural aminoacids and ACE and CTER terminals.')
            sys.exit(1)
    else:
        message += 'The number of entries in the instruction field, followed by -o or --rem, is not right.\n'
        message += 'Type -h or --help for instructions\n'
    print(message)
if __name__ == '__main__':
    main()

